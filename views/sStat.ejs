<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="/stylesheets/bootstrap.min.css">
    <script src="/javascript/jquery-3.5.1.min.js"></script>
    <script src="/javascript/popper.min.js"></script>
    <script src="/javascript//bootstrap.min.js"></script>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="/stylesheets/fontello.css">
    <link rel="stylesheet" href="/stylesheets/sider.css">
    <link rel="stylesheet" href="/stylesheets/sStat.css">
    <script src="/javascript/vue.js"></script>
    <script src="/javascript/Chart.min.js"></script>

    <title>Document</title>



</head>

<body>

    <!-- 左邊sider -->
    <%- include('sSider', {active}); %>

    <div class="containerRight" id='stat'>
        <!-- 右邊內容放置區 -->

        <nav class="topTag row inWrapper position-sticky">
            <div class="dTag text24RG act">日營業額</div>
            <div class="dTag text24RG">月營業額</div>
        </nav>
        <ul class="statList">
            <li>
                <h2 class="text20RG">日期</h2>
                <p class="eng24R">{{date}}</p>
            </li>
            <li>
                <h2 class="text20RG">訂單量</h2>
                <p class="eng24R">{{orderTotal.count}}</p>
            </li>
            <li>
                <h2 class="text20RG">銷售總額</h2>
                <p class="eng24R">{{orderTotal.price}}</p>
            </li>
        </ul>
        <div class="d-flex align-items-center">
            <img class="lrImg" src="/image/left.png" @click='backDate'>
            <div class="dblock mt-4 col-10">
                <canvas id="chart" width="800" height="400"></canvas>
            </div>
            <img class="lrImg" src="/image/right.png" @click='addDate'>
        </div>

        <div class="typeButton">
            <span v-for='(item,index) in categoryNameGroup'>
                <button :class='currentIndex==index?  "text20R dbtn  btnGB btnB":"text20R dbtn btnGB"'
                    @click='(switchbutton(index))'>{{item}}</button>
            </span>
        </div>
        <!-- <div class="typeCheckbox" id='typeCheckbox'>
            <span>
            <span> <input type="checkbox" id="all">
                <label for="all" class="text20R">全選</label></span>
            <span v-for='item in category'>
                <input type="checkbox" id="all">
                <label for="all" class="text20R">{{item.productName}}</label>
            </span>
            </span>
        </div>
 -->

    </div>
    <!-- vue -->
    <script>
        // data資料

        // let data = {
        //     category: [{
        //             categoryID: '0',
        //             categoryName: '套餐',
        //             productName: 'A套餐',
        //             productName: 'B套餐',
        //             productName: 'C套餐',
        //         }, {
        //             categoryID: '1',
        //             categoryName: '漢堡',
        //             productName: '摩絲熱狗堡',
        //             productName: '摩絲熱狗堡1',
        //             productName: '摩絲熱狗堡3',
        //         }, {
        //             categoryID: '2',
        //             categoryName: '飲品',
        //             productName: '可樂',
        //             productName: '雪碧',
        //             productName: '玉米濃湯',
        //         }

        //     ],
        //     date: '2020.07.01',
        //     orderTotle: 1215,
        //     orderAmount: 31245
        // }


        //vue資料
        // 今日時間
        var date = new Date();
        var allTotal = 0;
        let store = new Vue({
            el: '#stat',
            data: {
                storeData: JSON.parse('<%- storeData %>'),
                orderSumData: JSON.parse('<%- orderSumData %>'),
                allTypeData: JSON.parse('<%- allTypeData %>'),
                categoryNameGroup: '',
                currentGroup: '',
                categoryOrdergroup: '',
                currentIndex: 0,
                orderTotal: {},
                date: date.getFullYear() + '.' + (date.getMonth() + 1) + '.'
                    + date.getDate()
            },
            mounted: function () {
                // 全類型標籤
                var categoryNameGroup = this.allTypeData.map((item) => {
                    categoryName = item.categoryName;
                    return categoryName
                })
                categoryNameGroup = [...(new Set(categoryNameGroup))];

                this.categoryNameGroup = categoryNameGroup;

                // 全商品訂單數量
                let { allTypeData, orderSumData } = this;

                allTypeData.forEach((item) => {
                    item['total'] = 0;
                })
                allTypeData.forEach((item) => {
                    for (let i = 0; i < orderSumData.length; i++) {
                        if (item.productName === orderSumData[i].productName) {
                            item.total = orderSumData[i].total;
                        }
                    }
                })
                // 營運統計用
                // 群組標籤
                var currentGroup = [];
                this.categoryNameGroup.forEach((item) => {
                    currentGroup.push(item);
                })
                this.currentGroup = currentGroup;


                var arry = [];
                // 營運統計用

                // 數量標籤,核對currentGroup與allTypeData的重疊項目
                for (let i = 0; i < this.currentGroup.length; i++) {
                    let text = 0;
                    for (let j = 0; j < allTypeData.length; j++) {
                        if (this.currentGroup[i] === allTypeData[j].categoryName) {
                            text += allTypeData[j].total
                        }
                    }
                    arry.push(text);
                }
                this.categoryOrdergroup = arry;
                orderSumData.forEach((item) => {
                    allTotal += item.total;
                    return allTotal
                })
                categoryNameGroup.unshift('全部');
                this.categoryOrdergroup.unshift(allTotal);
                this.currentGroup.unshift('全部');



                // 取總量
                // 取總訂單量
                let totalPrice = 0;
                this.orderTotal['count'] = this.categoryOrdergroup[0].toLocaleString('en-US');
                // 取總訂單價格
                this.orderSumData.forEach((item) => {
                    totalPrice += item.totalPrice
                })
                this.orderTotal['price'] = totalPrice.toLocaleString('en-US');


            },

            methods: {
                switchbutton(index) {
                    this.currentIndex = index;
                    if (index > 0) {
                        let { currentIndex, categoryNameGroup, allTypeData, orderSumData } = this;

                        // 群組標籤
                        currentGroup = [];
                        tagName = categoryNameGroup[index];
                        allTypeData.map((item) => {
                            if (item.categoryName == tagName) {
                                currentGroup.push(item.productName)
                            }
                        })
                        this.currentGroup = currentGroup;
                        this.currentGroup.unshift('全部');


                        // 數量陣列
                        var arry = [];

                        for (let i = 0; i < this.currentGroup.length; i++) {
                            let text = 0;
                            for (let j = 0; j < allTypeData.length; j++) {
                                if (this.currentGroup[i] === allTypeData[j].productName) {
                                    text += allTypeData[j].total
                                }
                            }
                            arry.push(text);
                        }
                        this.categoryOrdergroup = arry;
                        orderSumData.forEach((item) => {
                            allTotal += item.total;
                            return allTotal
                        })

                        // 總數量
                        let alltotal = 0;
                        this.categoryOrdergroup.forEach((item) => {
                            alltotal += item;
                        })
                        this.categoryOrdergroup[0] = alltotal;



                    } else {
                        var categoryNameGroup = this.allTypeData.map((item) => {
                            categoryName = item.categoryName;
                            return categoryName
                        })
                        categoryNameGroup = [...(new Set(categoryNameGroup))];

                        this.categoryNameGroup = categoryNameGroup;

                        // 全商品訂單數量
                        let { allTypeData, orderSumData } = this;

                        allTypeData.forEach((item) => {
                            item['total'] = 0;
                        })
                        allTypeData.forEach((item) => {
                            for (let i = 0; i < orderSumData.length; i++) {
                                if (item.productName === orderSumData[i].productName) {
                                    item.total = orderSumData[i].total;
                                }
                            }
                        })
                        // 營運統計用
                        // 群組標籤
                        var currentGroup = [];
                        this.categoryNameGroup.forEach((item) => {
                            currentGroup.push(item);
                        })
                        this.currentGroup = currentGroup;


                        var arry = [];
                        // 營運統計用

                        // 數量標籤,核對currentGroup與allTypeData的重疊項目
                        for (let i = 0; i < this.currentGroup.length; i++) {
                            let text = 0;
                            for (let j = 0; j < allTypeData.length; j++) {
                                if (this.currentGroup[i] === allTypeData[j].categoryName) {
                                    text += allTypeData[j].total
                                }
                            }
                            arry.push(text);
                        }
                        let allTotal = 0;
                        this.categoryOrdergroup = arry;
                        orderSumData.forEach((item) => {
                            allTotal += item.total;
                            return allTotal
                        })
                        categoryNameGroup.unshift('全部');
                        this.categoryOrdergroup.unshift(allTotal);
                        this.currentGroup.unshift('全部');

                    }
                    function updateConfigByMutating(chart) {
                        chart.data.labels = store.currentGroup;
                        chart.data.datasets[0].data = store.categoryOrdergroup;
                        chart.update();
                    }
                    updateConfigByMutating(chart);

                },
                backDate() {
                    date -= 86400000;
                    date = new Date(date);
                    this.date=date.getFullYear() + '.' + (date.getMonth() + 1) + '.'
                    + date.getDate();
                    console.log(date);
                },
                addDate() {
                    date=date.setDate(date.getDate()+1);
                    date = new Date(date);
                    this.date=date.getFullYear() + '.' + (date.getMonth() + 1) + '.'
                    + date.getDate();
                }
                 



            },


        })





        // 統計圖表
        Chart.defaults.global.defaultFontColor = '#373A3C';
        Chart.defaults.global.defaultFontSize = 20;
        Chart.defaults.global.defaultFontFamily = ['Alata',
            'Noto Sans TC'
        ];

        var ctx = document.getElementById('chart').getContext('2d');
        // bar
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: store.currentGroup,
                datasets: [{
                    label: '訂單量',
                    data: store.categoryOrdergroup,
                    backgroundColor: [
                        'rgba(236, 167, 42, 0.8)'

                    ],
                    borderColor: [
                        'rgba(236, 167, 42,1)'

                    ],
                    borderWidth: 1,
                    maxBarThickness: 2
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            fontSize: 16,
                            maxTicksLimit: 8,
                            beginAtZero: true,
                            userCallback: function (label, index, labels) {
                                // when the floored value is the same as the value we have a whole number 
                                if (Math.floor(label) === label) {
                                    return label;
                                }
                            }
                        }
                    }],
                    xAxes: [{
                        gridLines: {
                            display: false,
                            color: "black"
                        },
                        maxBarThickness: 80
                    }]
                }
            }
        });


    </script>

</body>

</html>